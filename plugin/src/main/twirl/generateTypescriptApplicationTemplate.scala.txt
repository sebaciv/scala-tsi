@(imports: Seq[String], classes: Seq[String], targetFile: String)

package nl.codestar.scalatsi.generator

import _root_.nl.codestar.scalatsi.TSNamedType
import _root_.nl.codestar.scalatsi.TypescriptType.TypescriptNamedType
import _root_.java.io.File
import _root_.nl.codestar.scalatsi.TypescriptType._
import _root_.nl.codestar.scalatsi.TSType

/** User imports */
@for(imp <- imports) {
import @imp
}

object ApplicationTypescriptGeneration extends _root_.nl.codestar.scalatsi.DefaultTSTypes {

  // If you get a generator or implicit not found error here, make sure you have defined a TSType[T] implicit and imported it
  val toOutput: Seq[TSNamedType[_]] = Seq(
    @for(userClass <- classes) {
      implicitly[TSNamedType[@userClass]],
    }
  )

  val options = _root_.nl.codestar.scalatsi.output.OutputOptions(
    targetFile = new File("@targetFile")
  )

  def main(args: Array[String]): Unit = {
    _root_.nl.codestar.scalatsi.output.WriteTSToFiles.write(options)(toOutput)
  }
}
